// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SharpCqrs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DomainVersion")]
    public partial class DomainVersionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DomainVersion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DomainVersion", "\tAllows to represent a version stamp", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major version stamp")]
        [NUnit.Framework.CategoryAttribute("modeling")]
        [NUnit.Framework.TestCaseAttribute("0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "9", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "17", new string[0])]
        public virtual void CreateNewMajorVersionStamp(string major, string printed, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "modeling"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major version stamp", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("A new major version is created with {0}", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("The minor version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("The revision version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0.0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "0.1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "1.0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1.1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "9.2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "17.3", new string[0])]
        public virtual void CreateNewMajor_MinorVersionStamp(string major, string minor, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor version stamp", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given(string.Format("A new major.minor version is created with {0} and {1}", major, minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And(string.Format("The minor version looks like \"{0}\"", minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("The revision version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor.revision version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "2", "0.0.2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "3", "0.1.3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "4", "1.0.4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "5", "1.1.5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "6", "9.2.6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "7", "17.3.7", new string[0])]
        public virtual void CreateNewMajor_Minor_RevisionVersionStamp(string major, string minor, string revision, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor.revision version stamp", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given(string.Format("A new major.minor.revision version is created with {0}, {1} and {2}", major, minor, revision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And(string.Format("The minor version looks like \"{0}\"", minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And(string.Format("The revision version looks like \"{0}\"", revision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor.revision.build version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "2", "9876", "0.0.2.9876", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "3", "5432", "0.1.3.5432", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "4", "2468", "1.0.4.2468", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "5", "12", "1.1.5.12", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "6", "98765", "9.2.6.98765", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "7", "0", "17.3.7.0", new string[0])]
        public virtual void CreateNewMajor_Minor_Revision_BuildVersionStamp(string major, string minor, string revision, string build, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor.revision.build version stamp", exampleTags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given(string.Format("A new major.minor.revision.build version is created with {0}, {1}, {2} and {3}", major, minor, revision, build), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And(string.Format("The minor version looks like \"{0}\"", minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And(string.Format("The revision version looks like \"{0}\"", revision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And(string.Format("The build version looks like \"{0}\"", build), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new major.minor.details version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "2", "alpha1", "0.0.2.alpha1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0", "1", "3", "beta2", "0.1.3.beta2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "test", "rc1", "1.0.test.rc1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "1", "5", "rc2", "1.1.5.rc2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "6", "98765", "9.2.6.98765", new string[0])]
        [NUnit.Framework.TestCaseAttribute("17", "3", "7", "0", "17.3.7.0", new string[0])]
        public virtual void CreateNewMajor_Minor_DetailsVersionStamp(string major, string minor, string details1, string details2, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new major.minor.details version stamp", exampleTags);
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given(string.Format("A new major.minor.details version is created with {0}, {1}, \"{2}\" and \"{3}\"", major, minor, details1, details2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And(string.Format("The minor version looks like \"{0}\"", minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And(string.Format("The revision version looks like \"{0}\"", details1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And(string.Format("The build version looks like \"{0}\"", details2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new details version stamp")]
        [NUnit.Framework.TestCaseAttribute("0", "11", "alpha1", "0.11.alpha1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "3", "beta2", "1.3.beta2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "0", "rc1", "1.0.rc1", new string[0])]
        public virtual void CreateNewDetailsVersionStamp(string details1, string details2, string details3, string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new details version stamp", exampleTags);
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given(string.Format("A new details version is created with \"{0}\", \"{1}\" and \"{2}\"", details1, details2, details3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.When("The version is printed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then(string.Format("The printed version looks like \"{0}\"", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And(string.Format("The major version looks like \"{0}\"", details1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And(string.Format("The minor version looks like \"{0}\"", details2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And(string.Format("The revision version looks like \"{0}\"", details3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Try parse a major version")]
        [NUnit.Framework.TestCaseAttribute("1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "12", new string[0])]
        public virtual void TryParseAMajorVersion(string printed, string major, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try parse a major version", exampleTags);
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given(string.Format("A string \"{0}\" is tried to be parsed as a version", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.Then("The parsing attempt succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("The minor version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("The revision version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Try parse a wrong version")]
        [NUnit.Framework.TestCaseAttribute(".", new string[0])]
        public virtual void TryParseAWrongVersion(string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try parse a wrong version", exampleTags);
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given(string.Format("A string \"{0}\" is tried to be parsed as a version", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.Then("The parsing attempt failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse a major version")]
        [NUnit.Framework.TestCaseAttribute("1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "12", new string[0])]
        public virtual void ParseAMajorVersion(string printed, string major, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse a major version", exampleTags);
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.Given(string.Format("A string \"{0}\" is parsed as a version", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
 testRunner.Then("The parsing succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And(string.Format("The major version looks like \"{0}\"", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("The minor version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And("The revision version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("The build version looks like \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse a wrong version")]
        [NUnit.Framework.TestCaseAttribute(".", new string[0])]
        public virtual void ParseAWrongVersion(string printed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse a wrong version", exampleTags);
#line 133
this.ScenarioSetup(scenarioInfo);
#line 134
 testRunner.Given(string.Format("A string \"{0}\" is parsed as a version", printed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 135
 testRunner.Then("The parsing failed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
